{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport api from '../utils/axios';\nexport function useMessages(projectId, recipientId) {\n  _s();\n  const queryClient = useQueryClient();\n  const {\n    data: messages,\n    isLoading\n  } = useQuery({\n    queryKey: ['messages', projectId],\n    queryFn: async () => {\n      try {\n        const response = await api.get(`/api/messages/project/${projectId}`);\n        console.log('Gelen mesajlar:', response.data); // Debug için\n        const messages = response.data.data;\n        return messages.map(msg => ({\n          id: msg._id,\n          content: msg.content,\n          createdAt: msg.createdAt,\n          isSender: msg.sender._id === localStorage.getItem('userId')\n        }));\n      } catch (error) {\n        console.error('Mesaj yükleme hatası:', error);\n        throw error;\n      }\n    }\n  });\n  const sendMessage = useMutation({\n    mutationFn: async content => {\n      try {\n        console.log('Gönderilen veri:', {\n          content,\n          projectId,\n          recipientId\n        }); // Debug için\n        const response = await api.post('/api/messages', {\n          content,\n          projectId,\n          recipientId\n        });\n        console.log('Sunucu yanıtı:', response.data); // Debug için\n        return response.data.data;\n      } catch (error) {\n        console.error('Mesaj gönderme hatası:', error);\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: ['messages', projectId]\n      });\n    },\n    onError: error => {\n      console.error('Mutation hatası:', error);\n    }\n  });\n  const handleSendMessage = (content, options) => {\n    sendMessage.mutate(content, {\n      onSuccess: () => {\n        var _options$onSuccess;\n        options === null || options === void 0 ? void 0 : (_options$onSuccess = options.onSuccess) === null || _options$onSuccess === void 0 ? void 0 : _options$onSuccess.call(options);\n      }\n    });\n  };\n  return {\n    messages,\n    isLoading,\n    sendMessage: handleSendMessage\n  };\n}\n_s(useMessages, \"4tBwuwAnxCQmvLg+SQmm9ValFno=\", false, function () {\n  return [useQueryClient, useQuery, useMutation];\n});","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","api","useMessages","projectId","recipientId","_s","queryClient","data","messages","isLoading","queryKey","queryFn","response","get","console","log","map","msg","id","_id","content","createdAt","isSender","sender","localStorage","getItem","error","sendMessage","mutationFn","post","onSuccess","invalidateQueries","onError","handleSendMessage","options","mutate","_options$onSuccess","call"],"sources":["C:/Users/suleymanyasar/Desktop/çalışmalar/cursor2/frontend/src/hooks/useMessages.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport api from '../utils/axios';\r\nimport { ChatMessage } from '../types/chat';\r\n\r\ninterface Message {\r\n    _id: string;\r\n    conversation_id: number;\r\n    sender: {\r\n        _id: string;\r\n        name: string;\r\n        email: string;\r\n    };\r\n    receiver_id: number;\r\n    content: string;\r\n    project_id: number;\r\n    status: 'sent' | 'delivered' | 'read';\r\n    read: boolean;\r\n    createdAt: string;\r\n}\r\n\r\ninterface SendMessageOptions {\r\n    onSuccess?: () => void;\r\n}\r\n\r\nexport function useMessages(projectId: string, recipientId: string) {\r\n    const queryClient = useQueryClient();\r\n\r\n    const { data: messages, isLoading } = useQuery<ChatMessage[]>({\r\n        queryKey: ['messages', projectId],\r\n        queryFn: async () => {\r\n            try {\r\n                const response = await api.get(`/api/messages/project/${projectId}`);\r\n                console.log('Gelen mesajlar:', response.data); // Debug için\r\n                const messages = response.data.data;\r\n                return messages.map((msg: Message) => ({\r\n                    id: msg._id,\r\n                    content: msg.content,\r\n                    createdAt: msg.createdAt,\r\n                    isSender: msg.sender._id === localStorage.getItem('userId')\r\n                }));\r\n            } catch (error) {\r\n                console.error('Mesaj yükleme hatası:', error);\r\n                throw error;\r\n            }\r\n        }\r\n    });\r\n\r\n    const sendMessage = useMutation<Message, Error, string, unknown>({\r\n        mutationFn: async (content: string) => {\r\n            try {\r\n                console.log('Gönderilen veri:', { content, projectId, recipientId }); // Debug için\r\n                const response = await api.post('/api/messages', {\r\n                    content,\r\n                    projectId,\r\n                    recipientId\r\n                });\r\n                console.log('Sunucu yanıtı:', response.data); // Debug için\r\n                return response.data.data;\r\n            } catch (error) {\r\n                console.error('Mesaj gönderme hatası:', error);\r\n                throw error;\r\n            }\r\n        },\r\n        onSuccess: () => {\r\n            queryClient.invalidateQueries({ queryKey: ['messages', projectId] });\r\n        },\r\n        onError: (error) => {\r\n            console.error('Mutation hatası:', error);\r\n        }\r\n    });\r\n\r\n    const handleSendMessage = (content: string, options?: SendMessageOptions) => {\r\n        sendMessage.mutate(content, {\r\n            onSuccess: () => {\r\n                options?.onSuccess?.();\r\n            }\r\n        });\r\n    };\r\n\r\n    return {\r\n        messages,\r\n        isLoading,\r\n        sendMessage: handleSendMessage\r\n    };\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}