{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport api from '../utils/axios';\nexport function useMessages(projectId, recipientId) {\n  _s();\n  const queryClient = useQueryClient();\n  const {\n    data: messages,\n    isLoading\n  } = useQuery({\n    queryKey: ['messages', projectId],\n    queryFn: async () => {\n      const response = await api.get(`/messages/project/${projectId}`);\n      const messages = response.data.data;\n      // Message'ları ChatMessage formatına dönüştür\n      return messages.map(msg => ({\n        id: msg._id,\n        content: msg.content,\n        createdAt: msg.createdAt,\n        isSender: msg.sender._id === localStorage.getItem('userId')\n      }));\n    }\n  });\n  const sendMessage = useMutation({\n    mutationFn: content => api.post('/messages/send', {\n      project_id: projectId,\n      content,\n      receiver_id: recipientId\n    }).then(res => res.data.data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: ['messages', projectId]\n      });\n    }\n  });\n  const handleSendMessage = (content, options) => {\n    sendMessage.mutate(content, {\n      onSuccess: () => {\n        var _options$onSuccess;\n        options === null || options === void 0 ? void 0 : (_options$onSuccess = options.onSuccess) === null || _options$onSuccess === void 0 ? void 0 : _options$onSuccess.call(options);\n      }\n    });\n  };\n  return {\n    messages,\n    isLoading,\n    sendMessage: handleSendMessage\n  };\n}\n_s(useMessages, \"4tBwuwAnxCQmvLg+SQmm9ValFno=\", false, function () {\n  return [useQueryClient, useQuery, useMutation];\n});","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","api","useMessages","projectId","recipientId","_s","queryClient","data","messages","isLoading","queryKey","queryFn","response","get","map","msg","id","_id","content","createdAt","isSender","sender","localStorage","getItem","sendMessage","mutationFn","post","project_id","receiver_id","then","res","onSuccess","invalidateQueries","handleSendMessage","options","mutate","_options$onSuccess","call"],"sources":["C:/Users/suleymanyasar/Desktop/çalışmalar/cursor2/frontend/src/hooks/useMessages.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport api from '../utils/axios';\r\n\r\ninterface Message {\r\n    _id: string;\r\n    conversation_id: number;\r\n    sender: {\r\n        _id: string;\r\n        name: string;\r\n        email: string;\r\n    };\r\n    receiver_id: number;\r\n    content: string;\r\n    project_id: number;\r\n    status: 'sent' | 'delivered' | 'read';\r\n    read: boolean;\r\n    createdAt: string;\r\n}\r\n\r\ninterface SendMessageOptions {\r\n    onSuccess?: () => void;\r\n}\r\n\r\nexport function useMessages(projectId: string, recipientId: string) {\r\n    const queryClient = useQueryClient();\r\n\r\n    const { data: messages, isLoading } = useQuery<Message[]>({\r\n        queryKey: ['messages', projectId],\r\n        queryFn: async () => {\r\n            const response = await api.get(`/messages/project/${projectId}`);\r\n            const messages = response.data.data;\r\n            // Message'ları ChatMessage formatına dönüştür\r\n            return messages.map((msg: Message) => ({\r\n                id: msg._id,\r\n                content: msg.content,\r\n                createdAt: msg.createdAt,\r\n                isSender: msg.sender._id === localStorage.getItem('userId')\r\n            }));\r\n        }\r\n    });\r\n\r\n    const sendMessage = useMutation<Message, Error, string, unknown>({\r\n        mutationFn: (content: string) => \r\n            api.post('/messages/send', {\r\n                project_id: projectId,\r\n                content,\r\n                receiver_id: recipientId\r\n            }).then(res => res.data.data),\r\n        onSuccess: () => {\r\n            queryClient.invalidateQueries({ queryKey: ['messages', projectId] });\r\n        }\r\n    });\r\n\r\n    const handleSendMessage = (content: string, options?: SendMessageOptions) => {\r\n        sendMessage.mutate(content, {\r\n            onSuccess: () => {\r\n                options?.onSuccess?.();\r\n            }\r\n        });\r\n    };\r\n\r\n    return {\r\n        messages,\r\n        isLoading,\r\n        sendMessage: handleSendMessage\r\n    };\r\n} "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,EAAEC,cAAc,QAAQ,uBAAuB;AAC7E,OAAOC,GAAG,MAAM,gBAAgB;AAsBhC,OAAO,SAASC,WAAWA,CAACC,SAAiB,EAAEC,WAAmB,EAAE;EAAAC,EAAA;EAChE,MAAMC,WAAW,GAAGN,cAAc,CAAC,CAAC;EAEpC,MAAM;IAAEO,IAAI,EAAEC,QAAQ;IAAEC;EAAU,CAAC,GAAGX,QAAQ,CAAY;IACtDY,QAAQ,EAAE,CAAC,UAAU,EAAEP,SAAS,CAAC;IACjCQ,OAAO,EAAE,MAAAA,CAAA,KAAY;MACjB,MAAMC,QAAQ,GAAG,MAAMX,GAAG,CAACY,GAAG,CAAC,qBAAqBV,SAAS,EAAE,CAAC;MAChE,MAAMK,QAAQ,GAAGI,QAAQ,CAACL,IAAI,CAACA,IAAI;MACnC;MACA,OAAOC,QAAQ,CAACM,GAAG,CAAEC,GAAY,KAAM;QACnCC,EAAE,EAAED,GAAG,CAACE,GAAG;QACXC,OAAO,EAAEH,GAAG,CAACG,OAAO;QACpBC,SAAS,EAAEJ,GAAG,CAACI,SAAS;QACxBC,QAAQ,EAAEL,GAAG,CAACM,MAAM,CAACJ,GAAG,KAAKK,YAAY,CAACC,OAAO,CAAC,QAAQ;MAC9D,CAAC,CAAC,CAAC;IACP;EACJ,CAAC,CAAC;EAEF,MAAMC,WAAW,GAAGzB,WAAW,CAAkC;IAC7D0B,UAAU,EAAGP,OAAe,IACxBjB,GAAG,CAACyB,IAAI,CAAC,gBAAgB,EAAE;MACvBC,UAAU,EAAExB,SAAS;MACrBe,OAAO;MACPU,WAAW,EAAExB;IACjB,CAAC,CAAC,CAACyB,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACvB,IAAI,CAACA,IAAI,CAAC;IACjCwB,SAAS,EAAEA,CAAA,KAAM;MACbzB,WAAW,CAAC0B,iBAAiB,CAAC;QAAEtB,QAAQ,EAAE,CAAC,UAAU,EAAEP,SAAS;MAAE,CAAC,CAAC;IACxE;EACJ,CAAC,CAAC;EAEF,MAAM8B,iBAAiB,GAAGA,CAACf,OAAe,EAAEgB,OAA4B,KAAK;IACzEV,WAAW,CAACW,MAAM,CAACjB,OAAO,EAAE;MACxBa,SAAS,EAAEA,CAAA,KAAM;QAAA,IAAAK,kBAAA;QACbF,OAAO,aAAPA,OAAO,wBAAAE,kBAAA,GAAPF,OAAO,CAAEH,SAAS,cAAAK,kBAAA,uBAAlBA,kBAAA,CAAAC,IAAA,CAAAH,OAAqB,CAAC;MAC1B;IACJ,CAAC,CAAC;EACN,CAAC;EAED,OAAO;IACH1B,QAAQ;IACRC,SAAS;IACTe,WAAW,EAAES;EACjB,CAAC;AACL;AAAC5B,EAAA,CA3CeH,WAAW;EAAA,QACHF,cAAc,EAEIF,QAAQ,EAe1BC,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}