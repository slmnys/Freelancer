{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport api from '../utils/axios';\nexport function useMessages(projectId, recipientId) {\n  _s();\n  const queryClient = useQueryClient();\n  const {\n    data: messages,\n    isLoading\n  } = useQuery({\n    queryKey: ['messages', projectId],\n    queryFn: async () => {\n      const response = await api.get(`/messages/project/${projectId}`);\n      const messages = response.data.data;\n      // Message'ları ChatMessage formatına dönüştür\n      return messages.map(msg => ({\n        id: msg._id,\n        content: msg.content,\n        createdAt: msg.createdAt,\n        isSender: msg.sender._id === localStorage.getItem('userId')\n      }));\n    }\n  });\n  const sendMessage = useMutation({\n    mutationFn: async content => {\n      try {\n        console.log('Mesaj gönderiliyor:', {\n          content,\n          projectId,\n          recipientId\n        });\n        const response = await api.post('/messages', {\n          content,\n          projectId,\n          recipientId\n        });\n        console.log('API Yanıtı:', response.data);\n        if (!response.data.success) {\n          throw new Error(response.data.message || 'Mesaj gönderilemedi');\n        }\n        return response.data.data;\n      } catch (error) {\n        console.error('Mesaj gönderme hatası:', error);\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      console.log('Mesaj başarıyla gönderildi');\n      queryClient.invalidateQueries({\n        queryKey: ['messages', projectId]\n      });\n    },\n    onError: error => {\n      console.error('Mutation hatası:', error);\n    }\n  });\n  const handleSendMessage = (content, options) => {\n    sendMessage.mutate(content, {\n      onSuccess: () => {\n        var _options$onSuccess;\n        options === null || options === void 0 ? void 0 : (_options$onSuccess = options.onSuccess) === null || _options$onSuccess === void 0 ? void 0 : _options$onSuccess.call(options);\n      },\n      onError: error => {\n        var _options$onError;\n        options === null || options === void 0 ? void 0 : (_options$onError = options.onError) === null || _options$onError === void 0 ? void 0 : _options$onError.call(options, error);\n      }\n    });\n  };\n  return {\n    messages,\n    isLoading,\n    sendMessage: handleSendMessage\n  };\n}\n_s(useMessages, \"4tBwuwAnxCQmvLg+SQmm9ValFno=\", false, function () {\n  return [useQueryClient, useQuery, useMutation];\n});","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","api","useMessages","projectId","recipientId","_s","queryClient","data","messages","isLoading","queryKey","queryFn","response","get","map","msg","id","_id","content","createdAt","isSender","sender","localStorage","getItem","sendMessage","mutationFn","console","log","post","success","Error","message","error","onSuccess","invalidateQueries","onError","handleSendMessage","options","mutate","_options$onSuccess","call","_options$onError"],"sources":["C:/Users/suleymanyasar/Desktop/çalışmalar/cursor2/frontend/src/hooks/useMessages.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport api from '../utils/axios';\r\nimport { ChatMessage } from '../types/chat';\r\n\r\ninterface Message {\r\n    _id: string;\r\n    conversation_id: number;\r\n    sender: {\r\n        _id: string;\r\n        name: string;\r\n        email: string;\r\n    };\r\n    receiver_id: number;\r\n    content: string;\r\n    project_id: number;\r\n    status: 'sent' | 'delivered' | 'read';\r\n    read: boolean;\r\n    createdAt: string;\r\n}\r\n\r\ninterface SendMessageOptions {\r\n    onSuccess?: () => void;\r\n    onError?: (error: Error) => void;\r\n}\r\n\r\nexport function useMessages(projectId: string, recipientId: string) {\r\n    const queryClient = useQueryClient();\r\n\r\n    const { data: messages, isLoading } = useQuery<ChatMessage[]>({\r\n        queryKey: ['messages', projectId],\r\n        queryFn: async () => {\r\n            const response = await api.get(`/messages/project/${projectId}`);\r\n            const messages = response.data.data;\r\n            // Message'ları ChatMessage formatına dönüştür\r\n            return messages.map((msg: Message) => ({\r\n                id: msg._id,\r\n                content: msg.content,\r\n                createdAt: msg.createdAt,\r\n                isSender: msg.sender._id === localStorage.getItem('userId')\r\n            }));\r\n        }\r\n    });\r\n\r\n    const sendMessage = useMutation<Message, Error, string, unknown>({\r\n        mutationFn: async (content: string) => {\r\n            try {\r\n                console.log('Mesaj gönderiliyor:', { content, projectId, recipientId });\r\n                \r\n                const response = await api.post('/messages', {\r\n                    content,\r\n                    projectId,\r\n                    recipientId\r\n                });\r\n                \r\n                console.log('API Yanıtı:', response.data);\r\n                \r\n                if (!response.data.success) {\r\n                    throw new Error(response.data.message || 'Mesaj gönderilemedi');\r\n                }\r\n                \r\n                return response.data.data;\r\n            } catch (error) {\r\n                console.error('Mesaj gönderme hatası:', error);\r\n                throw error;\r\n            }\r\n        },\r\n        onSuccess: () => {\r\n            console.log('Mesaj başarıyla gönderildi');\r\n            queryClient.invalidateQueries({ queryKey: ['messages', projectId] });\r\n        },\r\n        onError: (error) => {\r\n            console.error('Mutation hatası:', error);\r\n        }\r\n    });\r\n\r\n    const handleSendMessage = (content: string, options?: SendMessageOptions) => {\r\n        sendMessage.mutate(content, {\r\n            onSuccess: () => {\r\n                options?.onSuccess?.();\r\n            },\r\n            onError: (error) => {\r\n                options?.onError?.(error);\r\n            }\r\n        });\r\n    };\r\n\r\n    return {\r\n        messages,\r\n        isLoading,\r\n        sendMessage: handleSendMessage\r\n    };\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}