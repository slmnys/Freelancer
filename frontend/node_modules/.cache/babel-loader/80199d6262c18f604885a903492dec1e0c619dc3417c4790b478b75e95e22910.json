{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport api from '../utils/axios';\nexport function useMessages(projectId, recipientId) {\n  _s();\n  const queryClient = useQueryClient();\n  const {\n    data: messages,\n    isLoading,\n    error\n  } = useQuery({\n    queryKey: ['messages', projectId],\n    queryFn: async () => {\n      try {\n        const response = await api.get(`/messages/project/${projectId}`);\n        console.log('API Response:', response.data);\n        if (!response.data.success) {\n          throw new Error(response.data.message);\n        }\n        const messages = response.data.data || [];\n        const currentUserId = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')).id : null;\n        return messages.map(msg => ({\n          id: msg.id || Date.now() + Math.random(),\n          content: msg.message_content || msg.content || '',\n          created_at: msg.created_at || new Date().toISOString(),\n          sender_id: msg.sender_id || 0,\n          recipient_id: msg.recipient_id || 0,\n          project_id: Number(msg.project_id) || 0,\n          isSender: currentUserId ? msg.sender_id === Number(currentUserId) : false\n        }));\n      } catch (error) {\n        console.error('Mesaj getirme hatası:', error);\n        throw error;\n      }\n    },\n    enabled: Boolean(projectId && localStorage.getItem('token'))\n  });\n  const sendMessage = useMutation({\n    mutationFn: async content => {\n      const response = await api.post('/messages', {\n        content,\n        projectId: parseInt(projectId),\n        recipientId: parseInt(recipientId)\n      });\n      if (!response.data.success) {\n        throw new Error(response.data.message);\n      }\n      return response.data.data;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: ['messages', projectId]\n      });\n    }\n  });\n  return {\n    messages: messages || [],\n    isLoading,\n    error,\n    sendMessage: content => sendMessage.mutate(content)\n  };\n}\n_s(useMessages, \"hZc4e6OMqSawCL052LUxNGusJbE=\", false, function () {\n  return [useQueryClient, useQuery, useMutation];\n});","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","api","useMessages","projectId","recipientId","_s","queryClient","data","messages","isLoading","error","queryKey","queryFn","response","get","console","log","success","Error","message","currentUserId","localStorage","getItem","JSON","parse","id","map","msg","Date","now","Math","random","content","message_content","created_at","toISOString","sender_id","recipient_id","project_id","Number","isSender","enabled","Boolean","sendMessage","mutationFn","post","parseInt","onSuccess","invalidateQueries","mutate"],"sources":["C:/Users/suleymanyasar/Desktop/çalışmalar/cursor2/frontend/src/hooks/useMessages.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport api from '../utils/axios';\r\nimport { ChatMessage } from '../types/chat';\r\n\r\nexport function useMessages(projectId: string, recipientId: string) {\r\n    const queryClient = useQueryClient();\r\n\r\n    const { data: messages, isLoading, error } = useQuery<ChatMessage[]>({\r\n        queryKey: ['messages', projectId],\r\n        queryFn: async () => {\r\n            try {\r\n                const response = await api.get(`/messages/project/${projectId}`);\r\n                console.log('API Response:', response.data);\r\n\r\n                if (!response.data.success) {\r\n                    throw new Error(response.data.message);\r\n                }\r\n\r\n                const messages = response.data.data || [];\r\n                const currentUserId = localStorage.getItem('user') ? \r\n                    JSON.parse(localStorage.getItem('user')!).id : null;\r\n\r\n                return messages.map((msg: any) => ({\r\n                    id: msg.id || Date.now() + Math.random(),\r\n                    content: msg.message_content || msg.content || '',\r\n                    created_at: msg.created_at || new Date().toISOString(),\r\n                    sender_id: msg.sender_id || 0,\r\n                    recipient_id: msg.recipient_id || 0,\r\n                    project_id: Number(msg.project_id) || 0,\r\n                    isSender: currentUserId ? msg.sender_id === Number(currentUserId) : false\r\n                }));\r\n            } catch (error) {\r\n                console.error('Mesaj getirme hatası:', error);\r\n                throw error;\r\n            }\r\n        },\r\n        enabled: Boolean(projectId && localStorage.getItem('token'))\r\n    });\r\n\r\n    const sendMessage = useMutation({\r\n        mutationFn: async (content: string) => {\r\n            const response = await api.post('/messages', {\r\n                content,\r\n                projectId: parseInt(projectId),\r\n                recipientId: parseInt(recipientId)\r\n            });\r\n\r\n            if (!response.data.success) {\r\n                throw new Error(response.data.message);\r\n            }\r\n\r\n            return response.data.data;\r\n        },\r\n        onSuccess: () => {\r\n            queryClient.invalidateQueries({ queryKey: ['messages', projectId] });\r\n        }\r\n    });\r\n\r\n    return {\r\n        messages: messages || [],\r\n        isLoading,\r\n        error,\r\n        sendMessage: (content: string) => sendMessage.mutate(content)\r\n    };\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}