{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport api from '../utils/axios';\n// ChatMessage import'unu kaldır\n// import { ChatMessage } from '../types/chat';\n\nexport function useMessages(projectId, recipientId) {\n  _s();\n  const queryClient = useQueryClient();\n  const {\n    data: messages,\n    isLoading,\n    error\n  } = useQuery({\n    queryKey: ['messages', projectId],\n    queryFn: async () => {\n      try {\n        const response = await api.get(`/messages/project/${projectId}`);\n        console.log('API Response:', response.data);\n        if (!response.data.success) {\n          throw new Error(response.data.message);\n        }\n        const messages = response.data.data || [];\n        const user = localStorage.getItem('user');\n        const userId = user ? JSON.parse(user).id : null;\n        console.log('Current User ID:', userId); // Debug log\n\n        return messages.map(msg => {\n          const messageDate = msg.created_at ? new Date(msg.created_at).toLocaleString('tr-TR') : new Date().toLocaleString('tr-TR');\n          return {\n            id: msg.id || Date.now() + Math.random(),\n            content: msg.message_content || msg.content || '',\n            created_at: messageDate,\n            sender_id: msg.sender_id || 0,\n            recipient_id: msg.recipient_id || 0,\n            project_id: Number(msg.project_id) || 0,\n            isSender: userId ? msg.sender_id === Number(userId) : false,\n            sender_name: msg.sender_name || ''\n          };\n        });\n      } catch (error) {\n        console.error('Mesaj getirme hatası:', error);\n        throw error;\n      }\n    },\n    enabled: Boolean(projectId && localStorage.getItem('token'))\n  });\n  const getUser = () => {\n    try {\n      return JSON.parse(localStorage.getItem('user') || '{}');\n    } catch (error) {\n      console.error('Kullanıcı verisi okunamadı:', error);\n      return {};\n    }\n  };\n  const user = getUser();\n  if (!(user !== null && user !== void 0 && user.id)) {\n    throw new Error('Oturum açmalısınız!');\n  }\n  const senderId = parseInt(user.id, 10);\n  const sendMessage = useMutation({\n    mutationFn: async content => {\n      if (!recipientId || recipientId === '0') {\n        throw new Error('Geçerli bir alıcı seçmelisiniz');\n      }\n      const response = await api.post('/messages', {\n        content,\n        projectId: parseInt(projectId),\n        recipientId: parseInt(recipientId),\n        senderId: senderId\n      });\n      if (!response.data.success) {\n        throw new Error(response.data.message);\n      }\n      return response.data.data;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries(['messages', projectId]);\n    }\n  });\n  const fetchUnreadMessages = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        console.error('Token bulunamadı');\n        return;\n      }\n      const response = await api.get('/messages/unread', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log('API yanıtı:', response.data);\n      if (response.data.success && Array.isArray(response.data.data)) {\n        // setMessages(response.data.data);\n        // setUnreadCount(response.data.data.length);\n      } else {\n        console.error('Geçersiz API yanıtı:', response.data);\n      }\n    } catch (error) {\n      console.error('Okunmamış mesajlar alınamadı:', error);\n    }\n  };\n  return {\n    messages: messages || [],\n    isLoading,\n    error,\n    sendMessage: content => sendMessage.mutate(content),\n    fetchUnreadMessages\n  };\n}\n_s(useMessages, \"hZc4e6OMqSawCL052LUxNGusJbE=\", false, function () {\n  return [useQueryClient, useQuery, useMutation];\n});","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","api","useMessages","projectId","recipientId","_s","queryClient","data","messages","isLoading","error","queryKey","queryFn","response","get","console","log","success","Error","message","user","localStorage","getItem","userId","JSON","parse","id","map","msg","messageDate","created_at","Date","toLocaleString","now","Math","random","content","message_content","sender_id","recipient_id","project_id","Number","isSender","sender_name","enabled","Boolean","getUser","senderId","parseInt","sendMessage","mutationFn","post","onSuccess","invalidateQueries","fetchUnreadMessages","token","headers","Authorization","Array","isArray","mutate"],"sources":["C:/Users/suleymanyasar/Desktop/çalışmalar/cursor2/frontend/src/hooks/useMessages.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport api from '../utils/axios';\r\n// ChatMessage import'unu kaldır\r\n// import { ChatMessage } from '../types/chat';\r\n\r\ninterface ChatMessage {\r\n  id: string;\r\n  content: string;\r\n  created_at: string;\r\n  sender_id: number;\r\n  recipient_id: number;\r\n  project_id: number;\r\n  isSender: boolean;\r\n  sender_name: string;\r\n}\r\n\r\nexport function useMessages(projectId: string, recipientId: string) {\r\n    const queryClient = useQueryClient();\r\n\r\n    const { data: messages, isLoading, error } = useQuery<ChatMessage[]>({\r\n        queryKey: ['messages', projectId],\r\n        queryFn: async () => {\r\n            try {\r\n                const response = await api.get(`/messages/project/${projectId}`);\r\n                console.log('API Response:', response.data);\r\n\r\n                if (!response.data.success) {\r\n                    throw new Error(response.data.message);\r\n                }\r\n\r\n                const messages = response.data.data || [];\r\n                const user = localStorage.getItem('user');\r\n                const userId = user ? JSON.parse(user).id : null;\r\n                console.log('Current User ID:', userId); // Debug log\r\n\r\n                return messages.map((msg: any) => {\r\n                    const messageDate = msg.created_at \r\n                        ? new Date(msg.created_at).toLocaleString('tr-TR')\r\n                        : new Date().toLocaleString('tr-TR');\r\n\r\n                    return {\r\n                        id: msg.id || Date.now() + Math.random(),\r\n                        content: msg.message_content || msg.content || '',\r\n                        created_at: messageDate,\r\n                        sender_id: msg.sender_id || 0,\r\n                        recipient_id: msg.recipient_id || 0,\r\n                        project_id: Number(msg.project_id) || 0,\r\n                        isSender: userId ? msg.sender_id === Number(userId) : false,\r\n                        sender_name: msg.sender_name || ''\r\n                    };\r\n                });\r\n            } catch (error) {\r\n                console.error('Mesaj getirme hatası:', error);\r\n                throw error;\r\n            }\r\n        },\r\n        enabled: Boolean(projectId && localStorage.getItem('token'))\r\n    });\r\n\r\n    const getUser = () => {\r\n        try {\r\n            return JSON.parse(localStorage.getItem('user') || '{}');\r\n        } catch (error) {\r\n            console.error('Kullanıcı verisi okunamadı:', error);\r\n            return {};\r\n        }\r\n    };\r\n\r\n    const user = getUser();\r\n    if (!user?.id) {\r\n        throw new Error('Oturum açmalısınız!');\r\n    }\r\n    const senderId = parseInt(user.id, 10);\r\n\r\n    const sendMessage = useMutation({\r\n        mutationFn: async (content: string) => {\r\n            if (!recipientId || recipientId === '0') {\r\n                throw new Error('Geçerli bir alıcı seçmelisiniz');\r\n            }\r\n            const response = await api.post('/messages', {\r\n                content,\r\n                projectId: parseInt(projectId),\r\n                recipientId: parseInt(recipientId),\r\n                senderId: senderId\r\n            });\r\n            \r\n            if (!response.data.success) {\r\n                throw new Error(response.data.message);\r\n            }\r\n            \r\n            return response.data.data;\r\n        },\r\n        onSuccess: () => {\r\n            queryClient.invalidateQueries(['messages', projectId]);\r\n        }\r\n    });\r\n\r\n    const fetchUnreadMessages = async () => {\r\n        try {\r\n            const token = localStorage.getItem('token');\r\n            if (!token) {\r\n                console.error('Token bulunamadı');\r\n                return;\r\n            }\r\n\r\n            const response = await api.get('/messages/unread', {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`\r\n                }\r\n            });\r\n\r\n            console.log('API yanıtı:', response.data);\r\n            \r\n            if (response.data.success && Array.isArray(response.data.data)) {\r\n                // setMessages(response.data.data);\r\n                // setUnreadCount(response.data.data.length);\r\n            } else {\r\n                console.error('Geçersiz API yanıtı:', response.data);\r\n            }\r\n        } catch (error) {\r\n            console.error('Okunmamış mesajlar alınamadı:', error);\r\n        }\r\n    };\r\n\r\n    return {\r\n        messages: messages || [],\r\n        isLoading,\r\n        error,\r\n        sendMessage: (content: string) => sendMessage.mutate(content),\r\n        fetchUnreadMessages\r\n    };\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}