{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport api from '../utils/axios';\nexport function useMessages(projectId, recipientId) {\n  _s();\n  const queryClient = useQueryClient();\n  const {\n    data: messages,\n    isLoading\n  } = useQuery({\n    queryKey: ['messages', projectId],\n    queryFn: async () => {\n      try {\n        const response = await api.get(`/messages/project/${projectId}`);\n        console.log('Mesaj yanıtı:', response.data);\n        if (!response.data.success) {\n          throw new Error(response.data.message);\n        }\n\n        // Mesajları doğru formata dönüştür\n        return response.data.data.map(msg => ({\n          id: msg.id,\n          content: msg.message_content || msg.message || msg.content,\n          createdAt: msg.created_at,\n          senderName: msg.sender_name,\n          isSender: msg.sender_id === parseInt(localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')).id : '0')\n        }));\n      } catch (error) {\n        console.error('Mesaj getirme hatası:', error);\n        throw error;\n      }\n    },\n    enabled: Boolean(projectId),\n    // Sadece projectId varlığını kontrol et\n    refetchInterval: 5000 // Her 5 saniyede bir yenile\n  });\n  const sendMessage = useMutation({\n    mutationFn: async content => {\n      if (!recipientId || !projectId) {\n        throw new Error('Gerekli bilgiler eksik');\n      }\n      console.log('Mesaj gönderiliyor:', {\n        content,\n        projectId,\n        recipientId\n      });\n\n      // Anahtar isimlerini backend'in beklediği şekilde düzenliyoruz:\n      const response = await api.post('/messages', {\n        content,\n        projectId: parseInt(projectId),\n        recipientId: parseInt(recipientId)\n      });\n      if (!response.data.success) {\n        throw new Error(response.data.message);\n      }\n      return response.data.data;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: ['messages', projectId]\n      });\n    }\n  });\n  return {\n    messages: messages || [],\n    // Boş dizi varsayılan değer olarak\n    isLoading,\n    sendMessage: content => sendMessage.mutate(content)\n  };\n}\n_s(useMessages, \"4tBwuwAnxCQmvLg+SQmm9ValFno=\", false, function () {\n  return [useQueryClient, useQuery, useMutation];\n});","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","api","useMessages","projectId","recipientId","_s","queryClient","data","messages","isLoading","queryKey","queryFn","response","get","console","log","success","Error","message","map","msg","id","content","message_content","createdAt","created_at","senderName","sender_name","isSender","sender_id","parseInt","localStorage","getItem","JSON","parse","error","enabled","Boolean","refetchInterval","sendMessage","mutationFn","post","onSuccess","invalidateQueries","mutate"],"sources":["C:/Users/suleymanyasar/Desktop/çalışmalar/cursor2/frontend/src/hooks/useMessages.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport api from '../utils/axios';\r\nimport { ChatMessage } from '../types/chat';\r\n\r\ninterface Message {\r\n    _id: string;\r\n    conversation_id: number;\r\n    sender: {\r\n        _id: string;\r\n        name: string;\r\n        email: string;\r\n    };\r\n    receiver_id: number;\r\n    content: string;\r\n    project_id: number;\r\n    status: 'sent' | 'delivered' | 'read';\r\n    read: boolean;\r\n    createdAt: string;\r\n}\r\n\r\nexport function useMessages(projectId: string, recipientId: string) {\r\n    const queryClient = useQueryClient();\r\n\r\n    const { data: messages, isLoading } = useQuery<ChatMessage[]>({\r\n        queryKey: ['messages', projectId],\r\n        queryFn: async () => {\r\n            try {\r\n                const response = await api.get(`/messages/project/${projectId}`);\r\n                console.log('Mesaj yanıtı:', response.data);\r\n                \r\n                if (!response.data.success) {\r\n                    throw new Error(response.data.message);\r\n                }\r\n\r\n                // Mesajları doğru formata dönüştür\r\n                return response.data.data.map((msg: any) => ({\r\n                    id: msg.id,\r\n                    content: msg.message_content || msg.message || msg.content,\r\n                    createdAt: msg.created_at,\r\n                    senderName: msg.sender_name,\r\n                    isSender: msg.sender_id === parseInt(localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')!).id : '0')\r\n                }));\r\n            } catch (error) {\r\n                console.error('Mesaj getirme hatası:', error);\r\n                throw error;\r\n            }\r\n        },\r\n        enabled: Boolean(projectId), // Sadece projectId varlığını kontrol et\r\n        refetchInterval: 5000 // Her 5 saniyede bir yenile\r\n    });\r\n\r\n    const sendMessage = useMutation<Message, Error, string, unknown>({\r\n        mutationFn: async (content: string) => {\r\n            if (!recipientId || !projectId) {\r\n                throw new Error('Gerekli bilgiler eksik');\r\n            }\r\n    \r\n            console.log('Mesaj gönderiliyor:', {\r\n                content,\r\n                projectId,\r\n                recipientId\r\n            });\r\n    \r\n            // Anahtar isimlerini backend'in beklediği şekilde düzenliyoruz:\r\n            const response = await api.post('/messages', {\r\n                content,\r\n                projectId: parseInt(projectId),\r\n                recipientId: parseInt(recipientId)\r\n            });\r\n    \r\n            if (!response.data.success) {\r\n                throw new Error(response.data.message);\r\n            }\r\n    \r\n            return response.data.data;\r\n        },\r\n        onSuccess: () => {\r\n            queryClient.invalidateQueries({ queryKey: ['messages', projectId] });\r\n        }\r\n    });\r\n\r\n    return {\r\n        messages: messages || [], // Boş dizi varsayılan değer olarak\r\n        isLoading,\r\n        sendMessage: (content: string) => sendMessage.mutate(content)\r\n    };\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}